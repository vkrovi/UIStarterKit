//
//  NError.swift
//  110DigitalLabs
//
//  Created by Venkat Krovi on 1/12/20.
//  Copyright Â© 2020 110DigitalLabs. All rights reserved.
//

import Foundation

public protocol ErrorCode {
}

public enum NErrorCode: ErrorCode {
    case unknown
    case notFound
    case firebaseNoSnap
}

/// Error interface for all application domain errors. SBT prefix to differentiate it from other errors from 3rd party
public protocol NError: Error {
    
    /// Internal message to display in debug builds in addition to the `errorDescription`.
    var debugMessage: String { get }
    var code: ErrorCode { get }
}

extension NError {
    
    public var descriptionWithConditionalDebugMessage: String {
        var message = self.localizedDescription
        let isDebug = true
        if isDebug, !self.debugMessage.isEmpty {
            message += "\n\n"
            message += "------- debug -------\n"
            message += "\n"
            message += self.debugMessage
        }
        return message
    }
}

extension Error {
    /// Cast a generic `Error` to a `SBTError`. If the receiver is already a `SBTError`, then it
    /// will return itself. Otherwise, a `SBTError` will be generated by extracting the underlying
    /// error's `localizedDescription`.
    public var nError: NError {
        if let nError = self as? NError {
            return nError
        } else {
            let nsError = self as NSError
            let nError = ExplicitError(code: NErrorCode.unknown, debugMessage: nsError.localizedDescription)
            return nError
        }
    }
}

/// An error that will display the explicitly provided message.
public struct ExplicitError: NError {
    
    public var code: ErrorCode
    public var debugMessage: String
    
    init(code: ErrorCode, debugMessage: String? = nil) {
        self.code = code
        self.debugMessage = debugMessage ?? ""
    }
    
    public var errorDescription: String? {
        return debugMessage
    }
}

/// ErrorBox provides a way to send generic errors through types like Result which require a concrete
/// type rather than a protocol.
public struct ErrorBox: Error, Equatable {
    public static func == (lhs: ErrorBox, rhs: ErrorBox) -> Bool {
        return lhs.sbtError.descriptionWithConditionalDebugMessage == rhs.sbtError.descriptionWithConditionalDebugMessage
    }
    
    var sbtError: NError
    init(_ sbtError: NError) { self.sbtError = sbtError }
}

extension ExplicitError {
public static func genericError(message: String = "generic error message") -> ExplicitError {
        return ExplicitError(code: NErrorCode.unknown, debugMessage: message)
    }
    
public static func firebaseNoSnap(key: String? = nil) -> ExplicitError {
        return ExplicitError(code: NErrorCode.firebaseNoSnap, debugMessage: "\(key ?? "")")
    }
}
